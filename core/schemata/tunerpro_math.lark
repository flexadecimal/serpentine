// TunerPro XDF/ADX equation grammar
// adapted from Erez Shinan's python2 grammar, found here https://github.com/lark-parser/lark/blob/master/examples/advanced/python2.lark

statement: (test)*
?test: comparison

// binary bitwise expressions cascade here to implement c-style precedence
// see https://en.cppreference.com/w/c/language/operator_precedence
?comparison: expr (comp_op expr)*
?expr: bitwise_nand
?bitwise_nand: bitwise_nor ("!&" bitwise_nor)*
?bitwise_nor: bitwise_or ("!|" bitwise_or)*
?bitwise_or: bitwise_xor ("|" bitwise_xor)*
?bitwise_xor: bitwise_and ("^" bitwise_and)*
?bitwise_and: bitwise_shift ("&" bitwise_shift)*
?bitwise_shift: arithmetic (shift_op arithmetic)*
?arithmetic: term (add_op term)*
?term: factor (mul_op factor)*

// unary operations only used for  special negation case of sum, 
// e.g. '-x+2' -> sum(negate(x), 2)
?factor: factor_op factor | molecule
!factor_op: "-"

// operators defined seperately for cascading precedence
!add_op: "+"|"-"
!shift_op: "<<"|">>"
!mul_op: "*"|"/"|"%"
!comp_op: "<"|">"|">="|"<="|"=="|"!="|"&&"|"||"

?molecule: molecule "(" [arguments] ")" -> func_call
    | atom
?atom: NAME
    | "(" test ")" 
    | number
    | "TRUE" -> true
    | "FALSE" -> false

arguments: (argument ";")* (argument [";"])
?argument: test

number: DEC_NUMBER | HEX_NUMBER | FLOAT 

DEC_NUMBER: /[1-9]\d*l?/i
HEX_NUMBER: /0x[\da-f]*l?/i

%import common.FLOAT -> FLOAT
%import common.INT -> _INT
%import common.CNAME -> NAME
%ignore /[\t \f]+/  // WS