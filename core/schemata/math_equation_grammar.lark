single_input: simple_stmt
// functions - python would use a name or expression here, but this is closed-form expression only
parameters: paramvalue ("," paramvalue)* 
?paramvalue: test

// statements - really just an improvement on tunerpro `if` statement
?simple_stmt: small_stmt (";" small_stmt)*
?small_stmt: expr_stmt
?expr_stmt: test
if_stmt: "if" test ":" suite ("elif" test ":" suite)* ["else" ":" suite]
suite: simple_stmt 

//expressions and tests
?test: or_test ("if" or_test "else" test)?
?test_nocond: or_test
?or_test: and_test
?and_test: not_test
?not_test: comparison
?comparison: expr (_comp_op expr)*
star_expr: "*" expr
?expr: xor_expr ("|" xor_expr)*
?xor_expr: and_expr ("^" and_expr)*
?and_expr: shift_expr ("&" shift_expr)*
?shift_expr: arith_expr (_shift_op arith_expr)*
?arith_expr: term (_add_op term)*
?term: factor (_mul_op factor)*
?factor: _factor_op factor

!_factor_op: "+"|"-"|"~"
!_add_op: "+"|"-"
!_shift_op: "<<"|">>"
!_mul_op: "*"|"@"|"/"|"%"|"//"
!_bitwise_op: "!|"|"^"|"&"|"!&"
!_comp_op: "<"|">"|"=="|">="|"<="|"!="|"&&"

?atom_expr: atom_expr "(" [arguments] ")" -> funccall
          | atom

?atom: "TRUE" -> const_true
     | "FALSE" -> const_false
     | "(" test ")"
     | number
         
arguments: argvalue ("," argvalue)*
?argvalue: test ("=" test)?

number: NUMBER

%import common.WS_INLINE
%import common.NUMBER
%ignore WS_INLINE